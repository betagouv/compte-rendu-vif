generator client {
  provider = "prisma-client-js"
}

generator typebox {
  provider = "prisma-typebox-generator"
  output   = "../src/generated/typebox"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model atdatabases_migrations_applied {
  id            BigInt   @id @default(autoincrement())
  index         Int
  name          String
  script        String
  applied_at    DateTime @db.Timestamptz(6)
  ignored_error String?
  obsolete      Boolean
}

model atdatabases_migrations_version {
  id      Int     @id
  version String?
}

model clause {
  key     String
  value   String
  udap_id String
  text    String
  hidden  Boolean?

  @@id([key, value, udap_id])
}

model report {
  id                  String         @id
  title               String?
  projectDescription  String?
  redactedBy          String?
  meetDate            DateTime?      @db.Timestamp(6)
  applicantName       String?
  applicantAddress    String?
  projectCadastralRef String?
  projectSpaceType    String?
  decision            String?
  precisions          String?
  contacts            String?
  furtherInformation  String?
  createdBy           String
  createdAt           DateTime       @db.Timestamp(6)
  serviceInstructeur  Int?
  pdf                 String?
  disabled            Boolean?
  udap_id             String?
  redactedById        String?
  applicantEmail      String?
  city                String?
  zipCode             String?
  pictures            pictures[]
  user                user           @relation(fields: [createdBy], references: [id], onDelete: SetNull, onUpdate: NoAction)
  tmp_pictures        tmp_pictures[]
}

model delegation {
  createdBy                         String
  delegatedTo                       String
  user_delegation_createdByTouser   user   @relation("delegation_createdByTouser", fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_delegation_delegatedToTouser user   @relation("delegation_delegatedToTouser", fields: [delegatedTo], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([createdBy, delegatedTo])
}

model udap {
  id             String   @id
  department     String
  completeCoords String?
  visible        Boolean?
  name           String?
  address        String?
  zipCode        String?
  city           String?
  phone          String?
  email          String?
  marianne_text  String?
  drac_text      String?
  udap_text      String?
  user           user[]
}

model user {
  id                                      String          @id
  name                                    String
  udap_id                                 String
  delegation_delegation_createdByTouser   delegation[]    @relation("delegation_createdByTouser")
  delegation_delegation_delegatedToTouser delegation[]    @relation("delegation_delegatedToTouser")
  internal_user                           internal_user[]
  report                                  report[]
  udap                                    udap            @relation(fields: [udap_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_udap_id")
}

model whitelist {
  email String @id
}

model internal_user {
  id                     String  @id
  email                  String
  role                   String
  password               String
  temporaryLink          String?
  temporaryLinkExpiresAt String?
  userId                 String
  user                   user    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model service_instructeurs {
  id         Int     @id
  full_name  String
  short_name String
  email      String?
  tel        String?
  udap_id    String?
}

model clause_v2 {
  id       String  @id
  key      String
  value    String
  position Int?
  udap_id  String?
  text     String
}

model pdf_snapshot {
  id        String  @id
  report_id String?
  html      String?
  report    String?
  user_id   String?
}

model pictures {
  id        String    @id
  reportId  String?
  url       String?
  createdAt DateTime? @db.Timestamp(6)
  report    report?   @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tmp_pictures {
  id        String    @id
  reportId  String?
  createdAt DateTime? @db.Timestamp(6)
  report    report?   @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
