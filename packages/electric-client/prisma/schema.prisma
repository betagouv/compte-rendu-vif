generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/backend-client"
}

generator typebox {
  provider = "prisma-typebox-generator"
  output   = "../src/generated/typebox"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model atdatabases_migrations_applied {
  id            BigInt   @id @default(autoincrement())
  index         Int
  name          String
  script        String
  applied_at    DateTime @db.Timestamptz(6)
  ignored_error String?
  obsolete      Boolean
}

model atdatabases_migrations_version {
  id      Int     @id
  version String?
}

model clause {
  id               String             @id
  label            String
  value            String
  report_to_clause report_to_clause[]
}

model report {
  id                  String             @id
  title               String?
  projectDescription  String?
  redactedBy          String?
  meetDate            DateTime?          @db.Timestamp(6)
  applicantName       String?
  applicantAddress    String?
  projectCadastralRef String?
  projectSpaceType    String?
  decision            String?
  precisions          String?
  contacts            String?
  furtherInformation  String?
  createdByEmail      String
  createdAt           DateTime           @db.Timestamp(6)
  serviceInstructeur  Int?
  pdf                 String?
  user                user               @relation(fields: [createdByEmail], references: [email], onDelete: SetNull, onUpdate: NoAction)
  report_to_clause    report_to_clause[]
}

model report_to_clause {
  id       String @id
  reportId String
  clauseId String
  clause   clause @relation(fields: [clauseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  report   report @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model chip {
  key     String
  value   String
  udap_id String
  text    String

  @@id([key, value, udap_id])
}

model delegation {
  createdBy                         String
  delegatedTo                       String
  user_delegation_createdByTouser   user   @relation("delegation_createdByTouser", fields: [createdBy], references: [email], onDelete: Cascade, onUpdate: NoAction)
  user_delegation_delegatedToTouser user   @relation("delegation_delegatedToTouser", fields: [delegatedTo], references: [email], onDelete: Cascade, onUpdate: NoAction)

  @@id([createdBy, delegatedTo])
}

model udap {
  id             String   @id
  department     String
  completeCoords String?
  visible        Boolean?
  name           String?
  address        String?
  zipCode        String?
  city           String?
  phone          String?
  email          String?
  user           user[]
}

model user {
  email                                   String       @id
  name                                    String
  temporaryLink                           String?
  temporaryLinkExpiresAt                  String?
  password                                String
  udap_id                                 String
  delegation_delegation_createdByTouser   delegation[] @relation("delegation_createdByTouser")
  delegation_delegation_delegatedToTouser delegation[] @relation("delegation_delegatedToTouser")
  report                                  report[]
  udap                                    udap         @relation(fields: [udap_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_udap_id")
}

model whitelist {
  email String @id
}
