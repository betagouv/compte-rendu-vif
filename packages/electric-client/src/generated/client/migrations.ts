export default [
  {
    "statements": [
      "CREATE TABLE \"udap\" (\n  \"id\" TEXT NOT NULL,\n  \"department\" TEXT NOT NULL,\n  \"completeCoords\" TEXT,\n  \"visible\" INTEGER,\n  \"name\" TEXT,\n  \"address\" TEXT,\n  \"zipCode\" TEXT,\n  \"city\" TEXT,\n  \"phone\" TEXT,\n  \"email\" TEXT,\n  \"marianne_text\" TEXT,\n  \"drac_text\" TEXT,\n  \"udap_text\" TEXT,\n  CONSTRAINT \"udap_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"user\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"udap_id\" TEXT NOT NULL,\n  CONSTRAINT \"user_udap_id_fkey\" FOREIGN KEY (\"udap_id\") REFERENCES \"udap\" (\"id\") ON DELETE SET NULL,\n  CONSTRAINT \"user_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"delegation\" (\n  \"createdBy\" TEXT NOT NULL,\n  \"delegatedTo\" TEXT NOT NULL,\n  CONSTRAINT \"delegation_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"user\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"delegation_delegatedTo_fkey\" FOREIGN KEY (\"delegatedTo\") REFERENCES \"user\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"delegation_pkey\" PRIMARY KEY (\"createdBy\", \"delegatedTo\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'udap', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_udap_primarykey;",
      "CREATE TRIGGER update_ensure_main_udap_primarykey\n  BEFORE UPDATE ON \"main\".\"udap\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_udap_into_oplog;",
      "CREATE TRIGGER insert_main_udap_into_oplog\n   AFTER INSERT ON \"main\".\"udap\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'udap')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'udap', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('address', new.\"address\", 'city', new.\"city\", 'completeCoords', new.\"completeCoords\", 'department', new.\"department\", 'drac_text', new.\"drac_text\", 'email', new.\"email\", 'id', new.\"id\", 'marianne_text', new.\"marianne_text\", 'name', new.\"name\", 'phone', new.\"phone\", 'udap_text', new.\"udap_text\", 'visible', new.\"visible\", 'zipCode', new.\"zipCode\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_udap_into_oplog;",
      "CREATE TRIGGER update_main_udap_into_oplog\n   AFTER UPDATE ON \"main\".\"udap\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'udap')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'udap', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('address', new.\"address\", 'city', new.\"city\", 'completeCoords', new.\"completeCoords\", 'department', new.\"department\", 'drac_text', new.\"drac_text\", 'email', new.\"email\", 'id', new.\"id\", 'marianne_text', new.\"marianne_text\", 'name', new.\"name\", 'phone', new.\"phone\", 'udap_text', new.\"udap_text\", 'visible', new.\"visible\", 'zipCode', new.\"zipCode\"), json_object('address', old.\"address\", 'city', old.\"city\", 'completeCoords', old.\"completeCoords\", 'department', old.\"department\", 'drac_text', old.\"drac_text\", 'email', old.\"email\", 'id', old.\"id\", 'marianne_text', old.\"marianne_text\", 'name', old.\"name\", 'phone', old.\"phone\", 'udap_text', old.\"udap_text\", 'visible', old.\"visible\", 'zipCode', old.\"zipCode\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_udap_into_oplog;",
      "CREATE TRIGGER delete_main_udap_into_oplog\n   AFTER DELETE ON \"main\".\"udap\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'udap')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'udap', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('address', old.\"address\", 'city', old.\"city\", 'completeCoords', old.\"completeCoords\", 'department', old.\"department\", 'drac_text', old.\"drac_text\", 'email', old.\"email\", 'id', old.\"id\", 'marianne_text', old.\"marianne_text\", 'name', old.\"name\", 'phone', old.\"phone\", 'udap_text', old.\"udap_text\", 'visible', old.\"visible\", 'zipCode', old.\"zipCode\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'user', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_user_primarykey;",
      "CREATE TRIGGER update_ensure_main_user_primarykey\n  BEFORE UPDATE ON \"main\".\"user\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_user_into_oplog;",
      "CREATE TRIGGER insert_main_user_into_oplog\n   AFTER INSERT ON \"main\".\"user\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'user', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('id', new.\"id\", 'name', new.\"name\", 'udap_id', new.\"udap_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_user_into_oplog;",
      "CREATE TRIGGER update_main_user_into_oplog\n   AFTER UPDATE ON \"main\".\"user\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'user', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('id', new.\"id\", 'name', new.\"name\", 'udap_id', new.\"udap_id\"), json_object('id', old.\"id\", 'name', old.\"name\", 'udap_id', old.\"udap_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_user_into_oplog;",
      "CREATE TRIGGER delete_main_user_into_oplog\n   AFTER DELETE ON \"main\".\"user\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'user', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('id', old.\"id\", 'name', old.\"name\", 'udap_id', old.\"udap_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_user_udap_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_user_udap_id_into_oplog\n  AFTER INSERT ON \"main\".\"user\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'udap', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"udap\" WHERE \"id\" = new.\"udap_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_user_udap_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_user_udap_id_into_oplog\n  AFTER UPDATE ON \"main\".\"user\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'udap', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"udap\" WHERE \"id\" = new.\"udap_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'delegation', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_delegation_primarykey;",
      "CREATE TRIGGER update_ensure_main_delegation_primarykey\n  BEFORE UPDATE ON \"main\".\"delegation\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"createdBy\" != new.\"createdBy\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column createdBy as it belongs to the primary key')\n      WHEN old.\"delegatedTo\" != new.\"delegatedTo\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column delegatedTo as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_delegation_into_oplog;",
      "CREATE TRIGGER insert_main_delegation_into_oplog\n   AFTER INSERT ON \"main\".\"delegation\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'delegation')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'delegation', 'INSERT', json_patch('{}', json_object('createdBy', new.\"createdBy\", 'delegatedTo', new.\"delegatedTo\")), json_object('createdBy', new.\"createdBy\", 'delegatedTo', new.\"delegatedTo\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_delegation_into_oplog;",
      "CREATE TRIGGER update_main_delegation_into_oplog\n   AFTER UPDATE ON \"main\".\"delegation\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'delegation')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'delegation', 'UPDATE', json_patch('{}', json_object('createdBy', new.\"createdBy\", 'delegatedTo', new.\"delegatedTo\")), json_object('createdBy', new.\"createdBy\", 'delegatedTo', new.\"delegatedTo\"), json_object('createdBy', old.\"createdBy\", 'delegatedTo', old.\"delegatedTo\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_delegation_into_oplog;",
      "CREATE TRIGGER delete_main_delegation_into_oplog\n   AFTER DELETE ON \"main\".\"delegation\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'delegation')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'delegation', 'DELETE', json_patch('{}', json_object('createdBy', old.\"createdBy\", 'delegatedTo', old.\"delegatedTo\")), NULL, json_object('createdBy', old.\"createdBy\", 'delegatedTo', old.\"delegatedTo\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_delegation_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_delegation_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"delegation\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'delegation') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_delegation_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_delegation_createdBy_into_oplog\n  AFTER UPDATE ON \"main\".\"delegation\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'delegation') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_delegation_delegatedTo_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_delegation_delegatedTo_into_oplog\n  AFTER INSERT ON \"main\".\"delegation\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'delegation') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"delegatedTo\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_delegation_delegatedTo_into_oplog;",
      "CREATE TRIGGER compensation_update_main_delegation_delegatedTo_into_oplog\n  AFTER UPDATE ON \"main\".\"delegation\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'delegation') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"delegatedTo\";\nEND;"
    ],
    "version": "1"
  },
  {
    "statements": [
      "CREATE TABLE \"report\" (\n  \"id\" TEXT NOT NULL,\n  \"title\" TEXT,\n  \"projectDescription\" TEXT,\n  \"redactedBy\" TEXT,\n  \"meetDate\" TEXT,\n  \"applicantName\" TEXT,\n  \"applicantAddress\" TEXT,\n  \"projectCadastralRef\" TEXT,\n  \"projectSpaceType\" TEXT,\n  \"decision\" TEXT,\n  \"precisions\" TEXT,\n  \"contacts\" TEXT,\n  \"furtherInformation\" TEXT,\n  \"createdBy\" TEXT NOT NULL,\n  \"createdAt\" TEXT NOT NULL,\n  \"serviceInstructeur\" INTEGER,\n  \"pdf\" TEXT,\n  \"disabled\" INTEGER,\n  \"udap_id\" TEXT,\n  CONSTRAINT \"report_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"user\" (\"id\") ON DELETE SET NULL,\n  CONSTRAINT \"report_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'report', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_report_primarykey;",
      "CREATE TRIGGER update_ensure_main_report_primarykey\n  BEFORE UPDATE ON \"main\".\"report\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_report_into_oplog;",
      "CREATE TRIGGER insert_main_report_into_oplog\n   AFTER INSERT ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('applicantAddress', new.\"applicantAddress\", 'applicantName', new.\"applicantName\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_report_into_oplog;",
      "CREATE TRIGGER update_main_report_into_oplog\n   AFTER UPDATE ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('applicantAddress', new.\"applicantAddress\", 'applicantName', new.\"applicantName\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"), json_object('applicantAddress', old.\"applicantAddress\", 'applicantName', old.\"applicantName\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_report_into_oplog;",
      "CREATE TRIGGER delete_main_report_into_oplog\n   AFTER DELETE ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('applicantAddress', old.\"applicantAddress\", 'applicantName', old.\"applicantName\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_report_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_report_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"report\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_report_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_report_createdBy_into_oplog\n  AFTER UPDATE ON \"main\".\"report\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"createdBy\";\nEND;"
    ],
    "version": "2"
  },
  {
    "statements": [
      "CREATE TABLE \"clause\" (\n  \"key\" TEXT NOT NULL,\n  \"value\" TEXT NOT NULL,\n  \"udap_id\" TEXT NOT NULL,\n  \"text\" TEXT NOT NULL,\n  CONSTRAINT \"clause_pkey\" PRIMARY KEY (\"key\", \"value\", \"udap_id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'clause', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_clause_primarykey;",
      "CREATE TRIGGER update_ensure_main_clause_primarykey\n  BEFORE UPDATE ON \"main\".\"clause\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"key\" != new.\"key\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column key as it belongs to the primary key')\n      WHEN old.\"udap_id\" != new.\"udap_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column udap_id as it belongs to the primary key')\n      WHEN old.\"value\" != new.\"value\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column value as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_clause_into_oplog;",
      "CREATE TRIGGER insert_main_clause_into_oplog\n   AFTER INSERT ON \"main\".\"clause\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'clause', 'INSERT', json_patch('{}', json_object('key', new.\"key\", 'udap_id', new.\"udap_id\", 'value', new.\"value\")), json_object('key', new.\"key\", 'text', new.\"text\", 'udap_id', new.\"udap_id\", 'value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_clause_into_oplog;",
      "CREATE TRIGGER update_main_clause_into_oplog\n   AFTER UPDATE ON \"main\".\"clause\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'clause', 'UPDATE', json_patch('{}', json_object('key', new.\"key\", 'udap_id', new.\"udap_id\", 'value', new.\"value\")), json_object('key', new.\"key\", 'text', new.\"text\", 'udap_id', new.\"udap_id\", 'value', new.\"value\"), json_object('key', old.\"key\", 'text', old.\"text\", 'udap_id', old.\"udap_id\", 'value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_clause_into_oplog;",
      "CREATE TRIGGER delete_main_clause_into_oplog\n   AFTER DELETE ON \"main\".\"clause\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'clause', 'DELETE', json_patch('{}', json_object('key', old.\"key\", 'udap_id', old.\"udap_id\", 'value', old.\"value\")), NULL, json_object('key', old.\"key\", 'text', old.\"text\", 'udap_id', old.\"udap_id\", 'value', old.\"value\"), NULL);\nEND;"
    ],
    "version": "4"
  },
  {
    "statements": [
      "CREATE TABLE \"service_instructeurs\" (\n  \"id\" INTEGER NOT NULL,\n  \"full_name\" TEXT NOT NULL,\n  \"short_name\" TEXT NOT NULL,\n  \"email\" TEXT,\n  \"tel\" TEXT,\n  \"udap_id\" TEXT,\n  CONSTRAINT \"service_instructeurs_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'service_instructeurs', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_service_instructeurs_primarykey;",
      "CREATE TRIGGER update_ensure_main_service_instructeurs_primarykey\n  BEFORE UPDATE ON \"main\".\"service_instructeurs\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_service_instructeurs_into_oplog;",
      "CREATE TRIGGER insert_main_service_instructeurs_into_oplog\n   AFTER INSERT ON \"main\".\"service_instructeurs\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'service_instructeurs')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'service_instructeurs', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('email', new.\"email\", 'full_name', new.\"full_name\", 'id', new.\"id\", 'short_name', new.\"short_name\", 'tel', new.\"tel\", 'udap_id', new.\"udap_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_service_instructeurs_into_oplog;",
      "CREATE TRIGGER update_main_service_instructeurs_into_oplog\n   AFTER UPDATE ON \"main\".\"service_instructeurs\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'service_instructeurs')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'service_instructeurs', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('email', new.\"email\", 'full_name', new.\"full_name\", 'id', new.\"id\", 'short_name', new.\"short_name\", 'tel', new.\"tel\", 'udap_id', new.\"udap_id\"), json_object('email', old.\"email\", 'full_name', old.\"full_name\", 'id', old.\"id\", 'short_name', old.\"short_name\", 'tel', old.\"tel\", 'udap_id', old.\"udap_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_service_instructeurs_into_oplog;",
      "CREATE TRIGGER delete_main_service_instructeurs_into_oplog\n   AFTER DELETE ON \"main\".\"service_instructeurs\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'service_instructeurs')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'service_instructeurs', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('email', old.\"email\", 'full_name', old.\"full_name\", 'id', old.\"id\", 'short_name', old.\"short_name\", 'tel', old.\"tel\", 'udap_id', old.\"udap_id\"), NULL);\nEND;"
    ],
    "version": "7"
  },
  {
    "statements": [
      "ALTER TABLE \"report\" ADD COLUMN \"redactedById\" TEXT;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'report', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_report_primarykey;",
      "CREATE TRIGGER update_ensure_main_report_primarykey\n  BEFORE UPDATE ON \"main\".\"report\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_report_into_oplog;",
      "CREATE TRIGGER insert_main_report_into_oplog\n   AFTER INSERT ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('applicantAddress', new.\"applicantAddress\", 'applicantName', new.\"applicantName\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_report_into_oplog;",
      "CREATE TRIGGER update_main_report_into_oplog\n   AFTER UPDATE ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('applicantAddress', new.\"applicantAddress\", 'applicantName', new.\"applicantName\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"), json_object('applicantAddress', old.\"applicantAddress\", 'applicantName', old.\"applicantName\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_report_into_oplog;",
      "CREATE TRIGGER delete_main_report_into_oplog\n   AFTER DELETE ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('applicantAddress', old.\"applicantAddress\", 'applicantName', old.\"applicantName\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_report_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_report_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"report\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_report_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_report_createdBy_into_oplog\n  AFTER UPDATE ON \"main\".\"report\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"createdBy\";\nEND;"
    ],
    "version": "9"
  },
  {
    "statements": [
      "ALTER TABLE \"report\" ADD COLUMN \"applicantEmail\" TEXT;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'report', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_report_primarykey;",
      "CREATE TRIGGER update_ensure_main_report_primarykey\n  BEFORE UPDATE ON \"main\".\"report\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_report_into_oplog;",
      "CREATE TRIGGER insert_main_report_into_oplog\n   AFTER INSERT ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('applicantAddress', new.\"applicantAddress\", 'applicantEmail', new.\"applicantEmail\", 'applicantName', new.\"applicantName\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_report_into_oplog;",
      "CREATE TRIGGER update_main_report_into_oplog\n   AFTER UPDATE ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('applicantAddress', new.\"applicantAddress\", 'applicantEmail', new.\"applicantEmail\", 'applicantName', new.\"applicantName\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"), json_object('applicantAddress', old.\"applicantAddress\", 'applicantEmail', old.\"applicantEmail\", 'applicantName', old.\"applicantName\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_report_into_oplog;",
      "CREATE TRIGGER delete_main_report_into_oplog\n   AFTER DELETE ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('applicantAddress', old.\"applicantAddress\", 'applicantEmail', old.\"applicantEmail\", 'applicantName', old.\"applicantName\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_report_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_report_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"report\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_report_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_report_createdBy_into_oplog\n  AFTER UPDATE ON \"main\".\"report\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"createdBy\";\nEND;"
    ],
    "version": "901"
  },
  {
    "statements": [
      "CREATE TABLE \"clause_v2\" (\n  \"id\" TEXT NOT NULL,\n  \"key\" TEXT NOT NULL,\n  \"value\" TEXT NOT NULL,\n  \"position\" INTEGER,\n  \"udap_id\" TEXT,\n  \"text\" TEXT NOT NULL,\n  CONSTRAINT \"clause_v2_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'clause_v2', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_clause_v2_primarykey;",
      "CREATE TRIGGER update_ensure_main_clause_v2_primarykey\n  BEFORE UPDATE ON \"main\".\"clause_v2\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_clause_v2_into_oplog;",
      "CREATE TRIGGER insert_main_clause_v2_into_oplog\n   AFTER INSERT ON \"main\".\"clause_v2\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'clause_v2')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'clause_v2', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('id', new.\"id\", 'key', new.\"key\", 'position', new.\"position\", 'text', new.\"text\", 'udap_id', new.\"udap_id\", 'value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_clause_v2_into_oplog;",
      "CREATE TRIGGER update_main_clause_v2_into_oplog\n   AFTER UPDATE ON \"main\".\"clause_v2\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'clause_v2')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'clause_v2', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('id', new.\"id\", 'key', new.\"key\", 'position', new.\"position\", 'text', new.\"text\", 'udap_id', new.\"udap_id\", 'value', new.\"value\"), json_object('id', old.\"id\", 'key', old.\"key\", 'position', old.\"position\", 'text', old.\"text\", 'udap_id', old.\"udap_id\", 'value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_clause_v2_into_oplog;",
      "CREATE TRIGGER delete_main_clause_v2_into_oplog\n   AFTER DELETE ON \"main\".\"clause_v2\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'clause_v2')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'clause_v2', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('id', old.\"id\", 'key', old.\"key\", 'position', old.\"position\", 'text', old.\"text\", 'udap_id', old.\"udap_id\", 'value', old.\"value\"), NULL);\nEND;"
    ],
    "version": "902"
  },
  {
    "statements": [
      "ALTER TABLE \"clause\" ADD COLUMN \"hidden\" INTEGER;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'clause', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_clause_primarykey;",
      "CREATE TRIGGER update_ensure_main_clause_primarykey\n  BEFORE UPDATE ON \"main\".\"clause\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"key\" != new.\"key\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column key as it belongs to the primary key')\n      WHEN old.\"udap_id\" != new.\"udap_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column udap_id as it belongs to the primary key')\n      WHEN old.\"value\" != new.\"value\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column value as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_clause_into_oplog;",
      "CREATE TRIGGER insert_main_clause_into_oplog\n   AFTER INSERT ON \"main\".\"clause\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'clause', 'INSERT', json_patch('{}', json_object('key', new.\"key\", 'udap_id', new.\"udap_id\", 'value', new.\"value\")), json_object('hidden', new.\"hidden\", 'key', new.\"key\", 'text', new.\"text\", 'udap_id', new.\"udap_id\", 'value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_clause_into_oplog;",
      "CREATE TRIGGER update_main_clause_into_oplog\n   AFTER UPDATE ON \"main\".\"clause\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'clause', 'UPDATE', json_patch('{}', json_object('key', new.\"key\", 'udap_id', new.\"udap_id\", 'value', new.\"value\")), json_object('hidden', new.\"hidden\", 'key', new.\"key\", 'text', new.\"text\", 'udap_id', new.\"udap_id\", 'value', new.\"value\"), json_object('hidden', old.\"hidden\", 'key', old.\"key\", 'text', old.\"text\", 'udap_id', old.\"udap_id\", 'value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_clause_into_oplog;",
      "CREATE TRIGGER delete_main_clause_into_oplog\n   AFTER DELETE ON \"main\".\"clause\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'clause', 'DELETE', json_patch('{}', json_object('key', old.\"key\", 'udap_id', old.\"udap_id\", 'value', old.\"value\")), NULL, json_object('hidden', old.\"hidden\", 'key', old.\"key\", 'text', old.\"text\", 'udap_id', old.\"udap_id\", 'value', old.\"value\"), NULL);\nEND;"
    ],
    "version": "903"
  },
  {
    "statements": [
      "CREATE TABLE \"pdf_snapshot\" (\n  \"id\" TEXT NOT NULL,\n  \"report_id\" TEXT,\n  \"html\" TEXT,\n  \"report\" TEXT,\n  \"user_id\" TEXT,\n  CONSTRAINT \"pdf_snapshot_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'pdf_snapshot', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_pdf_snapshot_primarykey;",
      "CREATE TRIGGER update_ensure_main_pdf_snapshot_primarykey\n  BEFORE UPDATE ON \"main\".\"pdf_snapshot\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_pdf_snapshot_into_oplog;",
      "CREATE TRIGGER insert_main_pdf_snapshot_into_oplog\n   AFTER INSERT ON \"main\".\"pdf_snapshot\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'pdf_snapshot')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'pdf_snapshot', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('html', new.\"html\", 'id', new.\"id\", 'report', new.\"report\", 'report_id', new.\"report_id\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_pdf_snapshot_into_oplog;",
      "CREATE TRIGGER update_main_pdf_snapshot_into_oplog\n   AFTER UPDATE ON \"main\".\"pdf_snapshot\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'pdf_snapshot')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'pdf_snapshot', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('html', new.\"html\", 'id', new.\"id\", 'report', new.\"report\", 'report_id', new.\"report_id\", 'user_id', new.\"user_id\"), json_object('html', old.\"html\", 'id', old.\"id\", 'report', old.\"report\", 'report_id', old.\"report_id\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_pdf_snapshot_into_oplog;",
      "CREATE TRIGGER delete_main_pdf_snapshot_into_oplog\n   AFTER DELETE ON \"main\".\"pdf_snapshot\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'pdf_snapshot')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'pdf_snapshot', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('html', old.\"html\", 'id', old.\"id\", 'report', old.\"report\", 'report_id', old.\"report_id\", 'user_id', old.\"user_id\"), NULL);\nEND;"
    ],
    "version": "904"
  },
  {
    "statements": [
      "ALTER TABLE \"report\" ADD COLUMN \"city\" TEXT;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'report', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_report_primarykey;",
      "CREATE TRIGGER update_ensure_main_report_primarykey\n  BEFORE UPDATE ON \"main\".\"report\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_report_into_oplog;",
      "CREATE TRIGGER insert_main_report_into_oplog\n   AFTER INSERT ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('applicantAddress', new.\"applicantAddress\", 'applicantEmail', new.\"applicantEmail\", 'applicantName', new.\"applicantName\", 'city', new.\"city\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_report_into_oplog;",
      "CREATE TRIGGER update_main_report_into_oplog\n   AFTER UPDATE ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('applicantAddress', new.\"applicantAddress\", 'applicantEmail', new.\"applicantEmail\", 'applicantName', new.\"applicantName\", 'city', new.\"city\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"), json_object('applicantAddress', old.\"applicantAddress\", 'applicantEmail', old.\"applicantEmail\", 'applicantName', old.\"applicantName\", 'city', old.\"city\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_report_into_oplog;",
      "CREATE TRIGGER delete_main_report_into_oplog\n   AFTER DELETE ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('applicantAddress', old.\"applicantAddress\", 'applicantEmail', old.\"applicantEmail\", 'applicantName', old.\"applicantName\", 'city', old.\"city\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_report_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_report_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"report\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_report_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_report_createdBy_into_oplog\n  AFTER UPDATE ON \"main\".\"report\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"createdBy\";\nEND;"
    ],
    "version": "905"
  },
  {
    "statements": [
      "ALTER TABLE \"report\" ADD COLUMN \"zipCode\" TEXT;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'report', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_report_primarykey;",
      "CREATE TRIGGER update_ensure_main_report_primarykey\n  BEFORE UPDATE ON \"main\".\"report\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_report_into_oplog;",
      "CREATE TRIGGER insert_main_report_into_oplog\n   AFTER INSERT ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('applicantAddress', new.\"applicantAddress\", 'applicantEmail', new.\"applicantEmail\", 'applicantName', new.\"applicantName\", 'city', new.\"city\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\", 'zipCode', new.\"zipCode\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_report_into_oplog;",
      "CREATE TRIGGER update_main_report_into_oplog\n   AFTER UPDATE ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('applicantAddress', new.\"applicantAddress\", 'applicantEmail', new.\"applicantEmail\", 'applicantName', new.\"applicantName\", 'city', new.\"city\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\", 'zipCode', new.\"zipCode\"), json_object('applicantAddress', old.\"applicantAddress\", 'applicantEmail', old.\"applicantEmail\", 'applicantName', old.\"applicantName\", 'city', old.\"city\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\", 'zipCode', old.\"zipCode\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_report_into_oplog;",
      "CREATE TRIGGER delete_main_report_into_oplog\n   AFTER DELETE ON \"main\".\"report\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('applicantAddress', old.\"applicantAddress\", 'applicantEmail', old.\"applicantEmail\", 'applicantName', old.\"applicantName\", 'city', old.\"city\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\", 'zipCode', old.\"zipCode\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_report_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_report_createdBy_into_oplog\n  AFTER INSERT ON \"main\".\"report\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"createdBy\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_report_createdBy_into_oplog;",
      "CREATE TRIGGER compensation_update_main_report_createdBy_into_oplog\n  AFTER UPDATE ON \"main\".\"report\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'report') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'user', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"user\" WHERE \"id\" = new.\"createdBy\";\nEND;"
    ],
    "version": "906"
  },
  {
    "statements": [
      "CREATE TABLE \"pictures\" (\n  \"id\" TEXT NOT NULL,\n  \"reportId\" TEXT,\n  \"url\" TEXT,\n  \"createdAt\" TEXT,\n  CONSTRAINT \"pictures_reportId_fkey\" FOREIGN KEY (\"reportId\") REFERENCES \"report\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"pictures_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'pictures', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_pictures_primarykey;",
      "CREATE TRIGGER update_ensure_main_pictures_primarykey\n  BEFORE UPDATE ON \"main\".\"pictures\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_pictures_into_oplog;",
      "CREATE TRIGGER insert_main_pictures_into_oplog\n   AFTER INSERT ON \"main\".\"pictures\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'pictures')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'pictures', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('createdAt', new.\"createdAt\", 'id', new.\"id\", 'reportId', new.\"reportId\", 'url', new.\"url\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_pictures_into_oplog;",
      "CREATE TRIGGER update_main_pictures_into_oplog\n   AFTER UPDATE ON \"main\".\"pictures\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'pictures')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'pictures', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('createdAt', new.\"createdAt\", 'id', new.\"id\", 'reportId', new.\"reportId\", 'url', new.\"url\"), json_object('createdAt', old.\"createdAt\", 'id', old.\"id\", 'reportId', old.\"reportId\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_pictures_into_oplog;",
      "CREATE TRIGGER delete_main_pictures_into_oplog\n   AFTER DELETE ON \"main\".\"pictures\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'pictures')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'pictures', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('createdAt', old.\"createdAt\", 'id', old.\"id\", 'reportId', old.\"reportId\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_pictures_reportId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_pictures_reportId_into_oplog\n  AFTER INSERT ON \"main\".\"pictures\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'pictures') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'report', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"report\" WHERE \"id\" = new.\"reportId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_pictures_reportId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_pictures_reportId_into_oplog\n  AFTER UPDATE ON \"main\".\"pictures\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'pictures') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'report', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"report\" WHERE \"id\" = new.\"reportId\";\nEND;"
    ],
    "version": "907"
  },
  {
    "statements": [
      "CREATE TABLE \"tmp_pictures\" (\n  \"id\" TEXT NOT NULL,\n  \"reportId\" TEXT,\n  \"createdAt\" TEXT,\n  CONSTRAINT \"tmp_pictures_reportId_fkey\" FOREIGN KEY (\"reportId\") REFERENCES \"report\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"tmp_pictures_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'tmp_pictures', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_tmp_pictures_primarykey;",
      "CREATE TRIGGER update_ensure_main_tmp_pictures_primarykey\n  BEFORE UPDATE ON \"main\".\"tmp_pictures\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_tmp_pictures_into_oplog;",
      "CREATE TRIGGER insert_main_tmp_pictures_into_oplog\n   AFTER INSERT ON \"main\".\"tmp_pictures\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tmp_pictures')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tmp_pictures', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('createdAt', new.\"createdAt\", 'id', new.\"id\", 'reportId', new.\"reportId\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_tmp_pictures_into_oplog;",
      "CREATE TRIGGER update_main_tmp_pictures_into_oplog\n   AFTER UPDATE ON \"main\".\"tmp_pictures\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tmp_pictures')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tmp_pictures', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('createdAt', new.\"createdAt\", 'id', new.\"id\", 'reportId', new.\"reportId\"), json_object('createdAt', old.\"createdAt\", 'id', old.\"id\", 'reportId', old.\"reportId\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_tmp_pictures_into_oplog;",
      "CREATE TRIGGER delete_main_tmp_pictures_into_oplog\n   AFTER DELETE ON \"main\".\"tmp_pictures\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tmp_pictures')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tmp_pictures', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('createdAt', old.\"createdAt\", 'id', old.\"id\", 'reportId', old.\"reportId\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_tmp_pictures_reportId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_tmp_pictures_reportId_into_oplog\n  AFTER INSERT ON \"main\".\"tmp_pictures\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tmp_pictures') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'report', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"report\" WHERE \"id\" = new.\"reportId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_tmp_pictures_reportId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_tmp_pictures_reportId_into_oplog\n  AFTER UPDATE ON \"main\".\"tmp_pictures\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tmp_pictures') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'report', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"report\" WHERE \"id\" = new.\"reportId\";\nEND;"
    ],
    "version": "908"
  },
  {
    "statements": [
      "CREATE TABLE \"picture_lines\" (\n  \"id\" TEXT NOT NULL,\n  \"pictureId\" TEXT,\n  \"lines\" TEXT NOT NULL,\n  \"createdAt\" TEXT,\n  CONSTRAINT \"picture_lines_pictureId_fkey\" FOREIGN KEY (\"pictureId\") REFERENCES \"pictures\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"picture_lines_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'picture_lines', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_picture_lines_primarykey;",
      "CREATE TRIGGER update_ensure_main_picture_lines_primarykey\n  BEFORE UPDATE ON \"main\".\"picture_lines\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_picture_lines_into_oplog;",
      "CREATE TRIGGER insert_main_picture_lines_into_oplog\n   AFTER INSERT ON \"main\".\"picture_lines\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'picture_lines')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'picture_lines', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('createdAt', new.\"createdAt\", 'id', new.\"id\", 'lines', new.\"lines\", 'pictureId', new.\"pictureId\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_picture_lines_into_oplog;",
      "CREATE TRIGGER update_main_picture_lines_into_oplog\n   AFTER UPDATE ON \"main\".\"picture_lines\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'picture_lines')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'picture_lines', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('createdAt', new.\"createdAt\", 'id', new.\"id\", 'lines', new.\"lines\", 'pictureId', new.\"pictureId\"), json_object('createdAt', old.\"createdAt\", 'id', old.\"id\", 'lines', old.\"lines\", 'pictureId', old.\"pictureId\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_picture_lines_into_oplog;",
      "CREATE TRIGGER delete_main_picture_lines_into_oplog\n   AFTER DELETE ON \"main\".\"picture_lines\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'picture_lines')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'picture_lines', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('createdAt', old.\"createdAt\", 'id', old.\"id\", 'lines', old.\"lines\", 'pictureId', old.\"pictureId\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_picture_lines_pictureId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_picture_lines_pictureId_into_oplog\n  AFTER INSERT ON \"main\".\"picture_lines\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'picture_lines') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'pictures', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"pictures\" WHERE \"id\" = new.\"pictureId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_picture_lines_pictureId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_picture_lines_pictureId_into_oplog\n  AFTER UPDATE ON \"main\".\"picture_lines\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'picture_lines') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'pictures', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"pictures\" WHERE \"id\" = new.\"pictureId\";\nEND;"
    ],
    "version": "909"
  }
]