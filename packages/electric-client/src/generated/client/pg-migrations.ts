export default [
  {
    "statements": [
      "CREATE TABLE udap (\n    id text NOT NULL,\n    department text NOT NULL,\n    \"completeCoords\" text,\n    visible boolean,\n    name text,\n    address text,\n    \"zipCode\" text,\n    city text,\n    phone text,\n    email text,\n    marianne_text text,\n    drac_text text,\n    udap_text text,\n    CONSTRAINT udap_pkey PRIMARY KEY (id)\n)",
      "CREATE TABLE \"user\" (\n    id text NOT NULL,\n    name text NOT NULL,\n    udap_id text NOT NULL,\n    CONSTRAINT user_pkey PRIMARY KEY (id),\n    CONSTRAINT user_udap_id_fkey FOREIGN KEY (udap_id) REFERENCES udap(id) ON DELETE SET NULL\n)",
      "CREATE TABLE delegation (\n    \"createdBy\" text NOT NULL,\n    \"delegatedTo\" text NOT NULL,\n    CONSTRAINT delegation_pkey PRIMARY KEY (\"createdBy\", \"delegatedTo\"),\n    CONSTRAINT \"delegation_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"user\"(id) ON DELETE CASCADE,\n    CONSTRAINT \"delegation_delegatedTo_fkey\" FOREIGN KEY (\"delegatedTo\") REFERENCES \"user\"(id) ON DELETE CASCADE\n)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'udap', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_udap_primarykey ON \"public\".\"udap\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_udap_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_udap_primarykey\n  BEFORE UPDATE ON \"public\".\"udap\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_udap_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_udap_into_oplog ON \"public\".\"udap\";",
      "    CREATE OR REPLACE FUNCTION insert_public_udap_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'udap';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'udap',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('address', new.\"address\", 'city', new.\"city\", 'completeCoords', new.\"completeCoords\", 'department', new.\"department\", 'drac_text', new.\"drac_text\", 'email', new.\"email\", 'id', new.\"id\", 'marianne_text', new.\"marianne_text\", 'name', new.\"name\", 'phone', new.\"phone\", 'udap_text', new.\"udap_text\", 'visible', new.\"visible\", 'zipCode', new.\"zipCode\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_udap_into_oplog\n  AFTER INSERT ON \"public\".\"udap\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_udap_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_udap_into_oplog ON \"public\".\"udap\";",
      "    CREATE OR REPLACE FUNCTION update_public_udap_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'udap';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'udap',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('address', new.\"address\", 'city', new.\"city\", 'completeCoords', new.\"completeCoords\", 'department', new.\"department\", 'drac_text', new.\"drac_text\", 'email', new.\"email\", 'id', new.\"id\", 'marianne_text', new.\"marianne_text\", 'name', new.\"name\", 'phone', new.\"phone\", 'udap_text', new.\"udap_text\", 'visible', new.\"visible\", 'zipCode', new.\"zipCode\"),\n            jsonb_build_object('address', old.\"address\", 'city', old.\"city\", 'completeCoords', old.\"completeCoords\", 'department', old.\"department\", 'drac_text', old.\"drac_text\", 'email', old.\"email\", 'id', old.\"id\", 'marianne_text', old.\"marianne_text\", 'name', old.\"name\", 'phone', old.\"phone\", 'udap_text', old.\"udap_text\", 'visible', old.\"visible\", 'zipCode', old.\"zipCode\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_udap_into_oplog\n  AFTER UPDATE ON \"public\".\"udap\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_udap_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_udap_into_oplog ON \"public\".\"udap\";",
      "    CREATE OR REPLACE FUNCTION delete_public_udap_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'udap';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'udap',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('address', old.\"address\", 'city', old.\"city\", 'completeCoords', old.\"completeCoords\", 'department', old.\"department\", 'drac_text', old.\"drac_text\", 'email', old.\"email\", 'id', old.\"id\", 'marianne_text', old.\"marianne_text\", 'name', old.\"name\", 'phone', old.\"phone\", 'udap_text', old.\"udap_text\", 'visible', old.\"visible\", 'zipCode', old.\"zipCode\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_udap_into_oplog\n  AFTER DELETE ON \"public\".\"udap\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_udap_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'user', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_user_primarykey ON \"public\".\"user\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_user_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_user_primarykey\n  BEFORE UPDATE ON \"public\".\"user\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_user_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_user_into_oplog ON \"public\".\"user\";",
      "    CREATE OR REPLACE FUNCTION insert_public_user_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'user';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'user',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'name', new.\"name\", 'udap_id', new.\"udap_id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_user_into_oplog\n  AFTER INSERT ON \"public\".\"user\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_user_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_user_into_oplog ON \"public\".\"user\";",
      "    CREATE OR REPLACE FUNCTION update_public_user_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'user';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'user',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'name', new.\"name\", 'udap_id', new.\"udap_id\"),\n            jsonb_build_object('id', old.\"id\", 'name', old.\"name\", 'udap_id', old.\"udap_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_user_into_oplog\n  AFTER UPDATE ON \"public\".\"user\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_user_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_user_into_oplog ON \"public\".\"user\";",
      "    CREATE OR REPLACE FUNCTION delete_public_user_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'user';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'user',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('id', old.\"id\", 'name', old.\"name\", 'udap_id', old.\"udap_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_user_into_oplog\n  AFTER DELETE ON \"public\".\"user\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_user_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_user_udap_id_into_oplog ON \"public\".\"user\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_user_udap_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'user';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'udap',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"udap\"\n          WHERE \"id\" = NEW.\"udap_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_user_udap_id_into_oplog\n  AFTER INSERT ON \"public\".\"user\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_user_udap_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_user_udap_id_into_oplog ON \"public\".\"user\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_user_udap_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'user';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'udap',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"udap\"\n          WHERE \"id\" = NEW.\"udap_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_user_udap_id_into_oplog\n  AFTER UPDATE ON \"public\".\"user\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_user_udap_id_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'delegation', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_delegation_primarykey ON \"public\".\"delegation\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_delegation_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"createdBy\" IS DISTINCT FROM NEW.\"createdBy\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column createdBy as it belongs to the primary key';\n  END IF;\n  IF OLD.\"delegatedTo\" IS DISTINCT FROM NEW.\"delegatedTo\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column delegatedTo as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_delegation_primarykey\n  BEFORE UPDATE ON \"public\".\"delegation\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_delegation_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_delegation_into_oplog ON \"public\".\"delegation\";",
      "    CREATE OR REPLACE FUNCTION insert_public_delegation_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'delegation';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'delegation',\n            'INSERT',\n            json_strip_nulls(json_build_object('createdBy', new.\"createdBy\", 'delegatedTo', new.\"delegatedTo\")),\n            jsonb_build_object('createdBy', new.\"createdBy\", 'delegatedTo', new.\"delegatedTo\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_delegation_into_oplog\n  AFTER INSERT ON \"public\".\"delegation\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_delegation_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_delegation_into_oplog ON \"public\".\"delegation\";",
      "    CREATE OR REPLACE FUNCTION update_public_delegation_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'delegation';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'delegation',\n            'UPDATE',\n            json_strip_nulls(json_build_object('createdBy', new.\"createdBy\", 'delegatedTo', new.\"delegatedTo\")),\n            jsonb_build_object('createdBy', new.\"createdBy\", 'delegatedTo', new.\"delegatedTo\"),\n            jsonb_build_object('createdBy', old.\"createdBy\", 'delegatedTo', old.\"delegatedTo\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_delegation_into_oplog\n  AFTER UPDATE ON \"public\".\"delegation\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_delegation_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_delegation_into_oplog ON \"public\".\"delegation\";",
      "    CREATE OR REPLACE FUNCTION delete_public_delegation_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'delegation';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'delegation',\n            'DELETE',\n            json_strip_nulls(json_build_object('createdBy', old.\"createdBy\", 'delegatedTo', old.\"delegatedTo\")),\n            NULL,\n            jsonb_build_object('createdBy', old.\"createdBy\", 'delegatedTo', old.\"delegatedTo\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_delegation_into_oplog\n  AFTER DELETE ON \"public\".\"delegation\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_delegation_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_delegation_createdBy_into_oplog ON \"public\".\"delegation\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_delegation_createdBy_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'delegation';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"createdBy\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_delegation_createdBy_into_oplog\n  AFTER INSERT ON \"public\".\"delegation\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_delegation_createdBy_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_delegation_createdBy_into_oplog ON \"public\".\"delegation\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_delegation_createdBy_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'delegation';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"createdBy\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_delegation_createdBy_into_oplog\n  AFTER UPDATE ON \"public\".\"delegation\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_delegation_createdBy_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_delegation_delegatedTo_into_oplog ON \"public\".\"delegation\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_delegation_delegatedTo_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'delegation';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"delegatedTo\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_delegation_delegatedTo_into_oplog\n  AFTER INSERT ON \"public\".\"delegation\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_delegation_delegatedTo_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_delegation_delegatedTo_into_oplog ON \"public\".\"delegation\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_delegation_delegatedTo_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'delegation';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"delegatedTo\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_delegation_delegatedTo_into_oplog\n  AFTER UPDATE ON \"public\".\"delegation\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_delegation_delegatedTo_into_oplog_function();"
    ],
    "version": "1"
  },
  {
    "statements": [
      "CREATE TABLE report (\n    id text NOT NULL,\n    title text,\n    \"projectDescription\" text,\n    \"redactedBy\" text,\n    \"meetDate\" timestamp without time zone,\n    \"applicantName\" text,\n    \"applicantAddress\" text,\n    \"projectCadastralRef\" text,\n    \"projectSpaceType\" text,\n    decision text,\n    precisions text,\n    contacts text,\n    \"furtherInformation\" text,\n    \"createdBy\" text NOT NULL,\n    \"createdAt\" timestamp without time zone NOT NULL,\n    \"serviceInstructeur\" integer,\n    pdf text,\n    disabled boolean,\n    udap_id text,\n    CONSTRAINT report_pkey PRIMARY KEY (id),\n    CONSTRAINT \"report_createdBy_fkey\" FOREIGN KEY (\"createdBy\") REFERENCES \"user\"(id) ON DELETE SET NULL\n)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'report', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_report_primarykey ON \"public\".\"report\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_report_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_report_primarykey\n  BEFORE UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_report_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION insert_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('applicantAddress', new.\"applicantAddress\", 'applicantName', new.\"applicantName\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_report_into_oplog\n  AFTER INSERT ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION update_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('applicantAddress', new.\"applicantAddress\", 'applicantName', new.\"applicantName\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"),\n            jsonb_build_object('applicantAddress', old.\"applicantAddress\", 'applicantName', old.\"applicantName\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_report_into_oplog\n  AFTER UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION delete_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('applicantAddress', old.\"applicantAddress\", 'applicantName', old.\"applicantName\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_report_into_oplog\n  AFTER DELETE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_report_createdBy_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_report_createdBy_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"createdBy\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_report_createdBy_into_oplog\n  AFTER INSERT ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_report_createdBy_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_report_createdBy_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_report_createdBy_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"createdBy\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_report_createdBy_into_oplog\n  AFTER UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_report_createdBy_into_oplog_function();"
    ],
    "version": "2"
  },
  {
    "statements": [
      "CREATE TABLE clause (\n    key text NOT NULL,\n    value text NOT NULL,\n    udap_id text NOT NULL,\n    text text NOT NULL,\n    CONSTRAINT clause_pkey PRIMARY KEY (key, value, udap_id)\n)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'clause', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_clause_primarykey ON \"public\".\"clause\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_clause_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"key\" IS DISTINCT FROM NEW.\"key\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column key as it belongs to the primary key';\n  END IF;\n  IF OLD.\"udap_id\" IS DISTINCT FROM NEW.\"udap_id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column udap_id as it belongs to the primary key';\n  END IF;\n  IF OLD.\"value\" IS DISTINCT FROM NEW.\"value\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column value as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_clause_primarykey\n  BEFORE UPDATE ON \"public\".\"clause\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_clause_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_clause_into_oplog ON \"public\".\"clause\";",
      "    CREATE OR REPLACE FUNCTION insert_public_clause_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'clause';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'clause',\n            'INSERT',\n            json_strip_nulls(json_build_object('key', new.\"key\", 'udap_id', new.\"udap_id\", 'value', new.\"value\")),\n            jsonb_build_object('key', new.\"key\", 'text', new.\"text\", 'udap_id', new.\"udap_id\", 'value', new.\"value\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_clause_into_oplog\n  AFTER INSERT ON \"public\".\"clause\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_clause_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_clause_into_oplog ON \"public\".\"clause\";",
      "    CREATE OR REPLACE FUNCTION update_public_clause_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'clause';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'clause',\n            'UPDATE',\n            json_strip_nulls(json_build_object('key', new.\"key\", 'udap_id', new.\"udap_id\", 'value', new.\"value\")),\n            jsonb_build_object('key', new.\"key\", 'text', new.\"text\", 'udap_id', new.\"udap_id\", 'value', new.\"value\"),\n            jsonb_build_object('key', old.\"key\", 'text', old.\"text\", 'udap_id', old.\"udap_id\", 'value', old.\"value\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_clause_into_oplog\n  AFTER UPDATE ON \"public\".\"clause\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_clause_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_clause_into_oplog ON \"public\".\"clause\";",
      "    CREATE OR REPLACE FUNCTION delete_public_clause_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'clause';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'clause',\n            'DELETE',\n            json_strip_nulls(json_build_object('key', old.\"key\", 'udap_id', old.\"udap_id\", 'value', old.\"value\")),\n            NULL,\n            jsonb_build_object('key', old.\"key\", 'text', old.\"text\", 'udap_id', old.\"udap_id\", 'value', old.\"value\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_clause_into_oplog\n  AFTER DELETE ON \"public\".\"clause\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_clause_into_oplog_function();"
    ],
    "version": "4"
  },
  {
    "statements": [
      "CREATE TABLE service_instructeurs (\n    id integer NOT NULL,\n    full_name text NOT NULL,\n    short_name text NOT NULL,\n    email text,\n    tel text,\n    udap_id text,\n    CONSTRAINT service_instructeurs_pkey PRIMARY KEY (id)\n)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'service_instructeurs', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_service_instructeurs_primarykey ON \"public\".\"service_instructeurs\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_service_instructeurs_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_service_instructeurs_primarykey\n  BEFORE UPDATE ON \"public\".\"service_instructeurs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_service_instructeurs_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_service_instructeurs_into_oplog ON \"public\".\"service_instructeurs\";",
      "    CREATE OR REPLACE FUNCTION insert_public_service_instructeurs_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'service_instructeurs';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'service_instructeurs',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('email', new.\"email\", 'full_name', new.\"full_name\", 'id', new.\"id\", 'short_name', new.\"short_name\", 'tel', new.\"tel\", 'udap_id', new.\"udap_id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_service_instructeurs_into_oplog\n  AFTER INSERT ON \"public\".\"service_instructeurs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_service_instructeurs_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_service_instructeurs_into_oplog ON \"public\".\"service_instructeurs\";",
      "    CREATE OR REPLACE FUNCTION update_public_service_instructeurs_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'service_instructeurs';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'service_instructeurs',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('email', new.\"email\", 'full_name', new.\"full_name\", 'id', new.\"id\", 'short_name', new.\"short_name\", 'tel', new.\"tel\", 'udap_id', new.\"udap_id\"),\n            jsonb_build_object('email', old.\"email\", 'full_name', old.\"full_name\", 'id', old.\"id\", 'short_name', old.\"short_name\", 'tel', old.\"tel\", 'udap_id', old.\"udap_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_service_instructeurs_into_oplog\n  AFTER UPDATE ON \"public\".\"service_instructeurs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_service_instructeurs_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_service_instructeurs_into_oplog ON \"public\".\"service_instructeurs\";",
      "    CREATE OR REPLACE FUNCTION delete_public_service_instructeurs_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'service_instructeurs';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'service_instructeurs',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('email', old.\"email\", 'full_name', old.\"full_name\", 'id', old.\"id\", 'short_name', old.\"short_name\", 'tel', old.\"tel\", 'udap_id', old.\"udap_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_service_instructeurs_into_oplog\n  AFTER DELETE ON \"public\".\"service_instructeurs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_service_instructeurs_into_oplog_function();"
    ],
    "version": "7"
  },
  {
    "statements": [
      "ALTER TABLE \"report\" ADD COLUMN \"redactedById\" TEXT",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'report', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_report_primarykey ON \"public\".\"report\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_report_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_report_primarykey\n  BEFORE UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_report_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION insert_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('applicantAddress', new.\"applicantAddress\", 'applicantName', new.\"applicantName\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_report_into_oplog\n  AFTER INSERT ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION update_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('applicantAddress', new.\"applicantAddress\", 'applicantName', new.\"applicantName\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"),\n            jsonb_build_object('applicantAddress', old.\"applicantAddress\", 'applicantName', old.\"applicantName\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_report_into_oplog\n  AFTER UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION delete_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('applicantAddress', old.\"applicantAddress\", 'applicantName', old.\"applicantName\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_report_into_oplog\n  AFTER DELETE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_report_createdBy_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_report_createdBy_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"createdBy\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_report_createdBy_into_oplog\n  AFTER INSERT ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_report_createdBy_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_report_createdBy_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_report_createdBy_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"createdBy\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_report_createdBy_into_oplog\n  AFTER UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_report_createdBy_into_oplog_function();"
    ],
    "version": "9"
  },
  {
    "statements": [
      "ALTER TABLE \"report\" ADD COLUMN \"applicantEmail\" TEXT",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'report', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_report_primarykey ON \"public\".\"report\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_report_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_report_primarykey\n  BEFORE UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_report_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION insert_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('applicantAddress', new.\"applicantAddress\", 'applicantEmail', new.\"applicantEmail\", 'applicantName', new.\"applicantName\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_report_into_oplog\n  AFTER INSERT ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION update_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('applicantAddress', new.\"applicantAddress\", 'applicantEmail', new.\"applicantEmail\", 'applicantName', new.\"applicantName\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"),\n            jsonb_build_object('applicantAddress', old.\"applicantAddress\", 'applicantEmail', old.\"applicantEmail\", 'applicantName', old.\"applicantName\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_report_into_oplog\n  AFTER UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION delete_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('applicantAddress', old.\"applicantAddress\", 'applicantEmail', old.\"applicantEmail\", 'applicantName', old.\"applicantName\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_report_into_oplog\n  AFTER DELETE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_report_createdBy_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_report_createdBy_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"createdBy\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_report_createdBy_into_oplog\n  AFTER INSERT ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_report_createdBy_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_report_createdBy_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_report_createdBy_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"createdBy\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_report_createdBy_into_oplog\n  AFTER UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_report_createdBy_into_oplog_function();"
    ],
    "version": "901"
  },
  {
    "statements": [
      "CREATE TABLE clause_v2 (\n    id text NOT NULL,\n    key text NOT NULL,\n    value text NOT NULL,\n    \"position\" integer,\n    udap_id text,\n    text text NOT NULL,\n    CONSTRAINT clause_v2_pkey PRIMARY KEY (id)\n)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'clause_v2', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_clause_v2_primarykey ON \"public\".\"clause_v2\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_clause_v2_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_clause_v2_primarykey\n  BEFORE UPDATE ON \"public\".\"clause_v2\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_clause_v2_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_clause_v2_into_oplog ON \"public\".\"clause_v2\";",
      "    CREATE OR REPLACE FUNCTION insert_public_clause_v2_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'clause_v2';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'clause_v2',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'key', new.\"key\", 'position', new.\"position\", 'text', new.\"text\", 'udap_id', new.\"udap_id\", 'value', new.\"value\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_clause_v2_into_oplog\n  AFTER INSERT ON \"public\".\"clause_v2\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_clause_v2_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_clause_v2_into_oplog ON \"public\".\"clause_v2\";",
      "    CREATE OR REPLACE FUNCTION update_public_clause_v2_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'clause_v2';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'clause_v2',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'key', new.\"key\", 'position', new.\"position\", 'text', new.\"text\", 'udap_id', new.\"udap_id\", 'value', new.\"value\"),\n            jsonb_build_object('id', old.\"id\", 'key', old.\"key\", 'position', old.\"position\", 'text', old.\"text\", 'udap_id', old.\"udap_id\", 'value', old.\"value\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_clause_v2_into_oplog\n  AFTER UPDATE ON \"public\".\"clause_v2\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_clause_v2_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_clause_v2_into_oplog ON \"public\".\"clause_v2\";",
      "    CREATE OR REPLACE FUNCTION delete_public_clause_v2_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'clause_v2';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'clause_v2',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('id', old.\"id\", 'key', old.\"key\", 'position', old.\"position\", 'text', old.\"text\", 'udap_id', old.\"udap_id\", 'value', old.\"value\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_clause_v2_into_oplog\n  AFTER DELETE ON \"public\".\"clause_v2\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_clause_v2_into_oplog_function();"
    ],
    "version": "902"
  },
  {
    "statements": [
      "ALTER TABLE clause ADD COLUMN \"hidden\" BOOLEAN",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'clause', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_clause_primarykey ON \"public\".\"clause\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_clause_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"key\" IS DISTINCT FROM NEW.\"key\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column key as it belongs to the primary key';\n  END IF;\n  IF OLD.\"udap_id\" IS DISTINCT FROM NEW.\"udap_id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column udap_id as it belongs to the primary key';\n  END IF;\n  IF OLD.\"value\" IS DISTINCT FROM NEW.\"value\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column value as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_clause_primarykey\n  BEFORE UPDATE ON \"public\".\"clause\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_clause_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_clause_into_oplog ON \"public\".\"clause\";",
      "    CREATE OR REPLACE FUNCTION insert_public_clause_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'clause';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'clause',\n            'INSERT',\n            json_strip_nulls(json_build_object('key', new.\"key\", 'udap_id', new.\"udap_id\", 'value', new.\"value\")),\n            jsonb_build_object('hidden', new.\"hidden\", 'key', new.\"key\", 'text', new.\"text\", 'udap_id', new.\"udap_id\", 'value', new.\"value\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_clause_into_oplog\n  AFTER INSERT ON \"public\".\"clause\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_clause_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_clause_into_oplog ON \"public\".\"clause\";",
      "    CREATE OR REPLACE FUNCTION update_public_clause_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'clause';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'clause',\n            'UPDATE',\n            json_strip_nulls(json_build_object('key', new.\"key\", 'udap_id', new.\"udap_id\", 'value', new.\"value\")),\n            jsonb_build_object('hidden', new.\"hidden\", 'key', new.\"key\", 'text', new.\"text\", 'udap_id', new.\"udap_id\", 'value', new.\"value\"),\n            jsonb_build_object('hidden', old.\"hidden\", 'key', old.\"key\", 'text', old.\"text\", 'udap_id', old.\"udap_id\", 'value', old.\"value\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_clause_into_oplog\n  AFTER UPDATE ON \"public\".\"clause\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_clause_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_clause_into_oplog ON \"public\".\"clause\";",
      "    CREATE OR REPLACE FUNCTION delete_public_clause_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'clause';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'clause',\n            'DELETE',\n            json_strip_nulls(json_build_object('key', old.\"key\", 'udap_id', old.\"udap_id\", 'value', old.\"value\")),\n            NULL,\n            jsonb_build_object('hidden', old.\"hidden\", 'key', old.\"key\", 'text', old.\"text\", 'udap_id', old.\"udap_id\", 'value', old.\"value\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_clause_into_oplog\n  AFTER DELETE ON \"public\".\"clause\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_clause_into_oplog_function();"
    ],
    "version": "903"
  },
  {
    "statements": [
      "CREATE TABLE pdf_snapshot (\n    id text NOT NULL,\n    report_id text,\n    html text,\n    report text,\n    user_id text,\n    CONSTRAINT pdf_snapshot_pkey PRIMARY KEY (id)\n)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'pdf_snapshot', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_pdf_snapshot_primarykey ON \"public\".\"pdf_snapshot\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_pdf_snapshot_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_pdf_snapshot_primarykey\n  BEFORE UPDATE ON \"public\".\"pdf_snapshot\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_pdf_snapshot_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_pdf_snapshot_into_oplog ON \"public\".\"pdf_snapshot\";",
      "    CREATE OR REPLACE FUNCTION insert_public_pdf_snapshot_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'pdf_snapshot';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'pdf_snapshot',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('html', new.\"html\", 'id', new.\"id\", 'report', new.\"report\", 'report_id', new.\"report_id\", 'user_id', new.\"user_id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_pdf_snapshot_into_oplog\n  AFTER INSERT ON \"public\".\"pdf_snapshot\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_pdf_snapshot_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_pdf_snapshot_into_oplog ON \"public\".\"pdf_snapshot\";",
      "    CREATE OR REPLACE FUNCTION update_public_pdf_snapshot_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'pdf_snapshot';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'pdf_snapshot',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('html', new.\"html\", 'id', new.\"id\", 'report', new.\"report\", 'report_id', new.\"report_id\", 'user_id', new.\"user_id\"),\n            jsonb_build_object('html', old.\"html\", 'id', old.\"id\", 'report', old.\"report\", 'report_id', old.\"report_id\", 'user_id', old.\"user_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_pdf_snapshot_into_oplog\n  AFTER UPDATE ON \"public\".\"pdf_snapshot\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_pdf_snapshot_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_pdf_snapshot_into_oplog ON \"public\".\"pdf_snapshot\";",
      "    CREATE OR REPLACE FUNCTION delete_public_pdf_snapshot_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'pdf_snapshot';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'pdf_snapshot',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('html', old.\"html\", 'id', old.\"id\", 'report', old.\"report\", 'report_id', old.\"report_id\", 'user_id', old.\"user_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_pdf_snapshot_into_oplog\n  AFTER DELETE ON \"public\".\"pdf_snapshot\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_pdf_snapshot_into_oplog_function();"
    ],
    "version": "904"
  },
  {
    "statements": [
      "ALTER TABLE \"report\" ADD COLUMN \"city\" TEXT",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'report', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_report_primarykey ON \"public\".\"report\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_report_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_report_primarykey\n  BEFORE UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_report_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION insert_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('applicantAddress', new.\"applicantAddress\", 'applicantEmail', new.\"applicantEmail\", 'applicantName', new.\"applicantName\", 'city', new.\"city\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_report_into_oplog\n  AFTER INSERT ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION update_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('applicantAddress', new.\"applicantAddress\", 'applicantEmail', new.\"applicantEmail\", 'applicantName', new.\"applicantName\", 'city', new.\"city\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\"),\n            jsonb_build_object('applicantAddress', old.\"applicantAddress\", 'applicantEmail', old.\"applicantEmail\", 'applicantName', old.\"applicantName\", 'city', old.\"city\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_report_into_oplog\n  AFTER UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION delete_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('applicantAddress', old.\"applicantAddress\", 'applicantEmail', old.\"applicantEmail\", 'applicantName', old.\"applicantName\", 'city', old.\"city\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_report_into_oplog\n  AFTER DELETE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_report_createdBy_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_report_createdBy_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"createdBy\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_report_createdBy_into_oplog\n  AFTER INSERT ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_report_createdBy_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_report_createdBy_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_report_createdBy_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"createdBy\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_report_createdBy_into_oplog\n  AFTER UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_report_createdBy_into_oplog_function();"
    ],
    "version": "905"
  },
  {
    "statements": [
      "ALTER TABLE \"report\" ADD COLUMN \"zipCode\" TEXT",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'report', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_report_primarykey ON \"public\".\"report\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_report_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_report_primarykey\n  BEFORE UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_report_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION insert_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('applicantAddress', new.\"applicantAddress\", 'applicantEmail', new.\"applicantEmail\", 'applicantName', new.\"applicantName\", 'city', new.\"city\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\", 'zipCode', new.\"zipCode\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_report_into_oplog\n  AFTER INSERT ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION update_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('applicantAddress', new.\"applicantAddress\", 'applicantEmail', new.\"applicantEmail\", 'applicantName', new.\"applicantName\", 'city', new.\"city\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'createdBy', new.\"createdBy\", 'decision', new.\"decision\", 'disabled', new.\"disabled\", 'furtherInformation', new.\"furtherInformation\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'pdf', new.\"pdf\", 'precisions', new.\"precisions\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectSpaceType', new.\"projectSpaceType\", 'redactedBy', new.\"redactedBy\", 'redactedById', new.\"redactedById\", 'serviceInstructeur', new.\"serviceInstructeur\", 'title', new.\"title\", 'udap_id', new.\"udap_id\", 'zipCode', new.\"zipCode\"),\n            jsonb_build_object('applicantAddress', old.\"applicantAddress\", 'applicantEmail', old.\"applicantEmail\", 'applicantName', old.\"applicantName\", 'city', old.\"city\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\", 'zipCode', old.\"zipCode\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_report_into_oplog\n  AFTER UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_report_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION delete_public_report_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'report',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('applicantAddress', old.\"applicantAddress\", 'applicantEmail', old.\"applicantEmail\", 'applicantName', old.\"applicantName\", 'city', old.\"city\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'createdBy', old.\"createdBy\", 'decision', old.\"decision\", 'disabled', old.\"disabled\", 'furtherInformation', old.\"furtherInformation\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'pdf', old.\"pdf\", 'precisions', old.\"precisions\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectSpaceType', old.\"projectSpaceType\", 'redactedBy', old.\"redactedBy\", 'redactedById', old.\"redactedById\", 'serviceInstructeur', old.\"serviceInstructeur\", 'title', old.\"title\", 'udap_id', old.\"udap_id\", 'zipCode', old.\"zipCode\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_report_into_oplog\n  AFTER DELETE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_report_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_report_createdBy_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_report_createdBy_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"createdBy\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_report_createdBy_into_oplog\n  AFTER INSERT ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_report_createdBy_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_report_createdBy_into_oplog ON \"public\".\"report\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_report_createdBy_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'report';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'user',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"user\"\n          WHERE \"id\" = NEW.\"createdBy\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_report_createdBy_into_oplog\n  AFTER UPDATE ON \"public\".\"report\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_report_createdBy_into_oplog_function();"
    ],
    "version": "906"
  },
  {
    "statements": [
      "CREATE TABLE pictures (\n    id text NOT NULL,\n    \"reportId\" text,\n    url text,\n    \"createdAt\" timestamp without time zone,\n    CONSTRAINT pictures_pkey PRIMARY KEY (id),\n    CONSTRAINT \"pictures_reportId_fkey\" FOREIGN KEY (\"reportId\") REFERENCES report(id) ON DELETE CASCADE\n)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'pictures', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_pictures_primarykey ON \"public\".\"pictures\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_pictures_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_pictures_primarykey\n  BEFORE UPDATE ON \"public\".\"pictures\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_pictures_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_pictures_into_oplog ON \"public\".\"pictures\";",
      "    CREATE OR REPLACE FUNCTION insert_public_pictures_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'pictures';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'pictures',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'id', new.\"id\", 'reportId', new.\"reportId\", 'url', new.\"url\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_pictures_into_oplog\n  AFTER INSERT ON \"public\".\"pictures\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_pictures_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_pictures_into_oplog ON \"public\".\"pictures\";",
      "    CREATE OR REPLACE FUNCTION update_public_pictures_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'pictures';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'pictures',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'id', new.\"id\", 'reportId', new.\"reportId\", 'url', new.\"url\"),\n            jsonb_build_object('createdAt', old.\"createdAt\", 'id', old.\"id\", 'reportId', old.\"reportId\", 'url', old.\"url\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_pictures_into_oplog\n  AFTER UPDATE ON \"public\".\"pictures\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_pictures_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_pictures_into_oplog ON \"public\".\"pictures\";",
      "    CREATE OR REPLACE FUNCTION delete_public_pictures_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'pictures';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'pictures',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('createdAt', old.\"createdAt\", 'id', old.\"id\", 'reportId', old.\"reportId\", 'url', old.\"url\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_pictures_into_oplog\n  AFTER DELETE ON \"public\".\"pictures\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_pictures_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_pictures_reportId_into_oplog ON \"public\".\"pictures\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_pictures_reportId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'pictures';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'report',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"report\"\n          WHERE \"id\" = NEW.\"reportId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_pictures_reportId_into_oplog\n  AFTER INSERT ON \"public\".\"pictures\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_pictures_reportId_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_pictures_reportId_into_oplog ON \"public\".\"pictures\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_pictures_reportId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'pictures';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'report',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"report\"\n          WHERE \"id\" = NEW.\"reportId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_pictures_reportId_into_oplog\n  AFTER UPDATE ON \"public\".\"pictures\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_pictures_reportId_into_oplog_function();"
    ],
    "version": "907"
  },
  {
    "statements": [
      "CREATE TABLE tmp_pictures (\n    id text NOT NULL,\n    \"reportId\" text,\n    \"createdAt\" timestamp without time zone,\n    CONSTRAINT tmp_pictures_pkey PRIMARY KEY (id),\n    CONSTRAINT \"tmp_pictures_reportId_fkey\" FOREIGN KEY (\"reportId\") REFERENCES report(id) ON DELETE CASCADE\n)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'tmp_pictures', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_tmp_pictures_primarykey ON \"public\".\"tmp_pictures\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_tmp_pictures_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_tmp_pictures_primarykey\n  BEFORE UPDATE ON \"public\".\"tmp_pictures\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_tmp_pictures_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_tmp_pictures_into_oplog ON \"public\".\"tmp_pictures\";",
      "    CREATE OR REPLACE FUNCTION insert_public_tmp_pictures_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tmp_pictures';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tmp_pictures',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'id', new.\"id\", 'reportId', new.\"reportId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_tmp_pictures_into_oplog\n  AFTER INSERT ON \"public\".\"tmp_pictures\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_tmp_pictures_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_tmp_pictures_into_oplog ON \"public\".\"tmp_pictures\";",
      "    CREATE OR REPLACE FUNCTION update_public_tmp_pictures_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tmp_pictures';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tmp_pictures',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'id', new.\"id\", 'reportId', new.\"reportId\"),\n            jsonb_build_object('createdAt', old.\"createdAt\", 'id', old.\"id\", 'reportId', old.\"reportId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_tmp_pictures_into_oplog\n  AFTER UPDATE ON \"public\".\"tmp_pictures\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_tmp_pictures_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_tmp_pictures_into_oplog ON \"public\".\"tmp_pictures\";",
      "    CREATE OR REPLACE FUNCTION delete_public_tmp_pictures_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tmp_pictures';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tmp_pictures',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('createdAt', old.\"createdAt\", 'id', old.\"id\", 'reportId', old.\"reportId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_tmp_pictures_into_oplog\n  AFTER DELETE ON \"public\".\"tmp_pictures\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_tmp_pictures_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_tmp_pictures_reportId_into_oplog ON \"public\".\"tmp_pictures\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_tmp_pictures_reportId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tmp_pictures';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'report',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"report\"\n          WHERE \"id\" = NEW.\"reportId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_tmp_pictures_reportId_into_oplog\n  AFTER INSERT ON \"public\".\"tmp_pictures\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_tmp_pictures_reportId_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_tmp_pictures_reportId_into_oplog ON \"public\".\"tmp_pictures\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_tmp_pictures_reportId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tmp_pictures';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'report',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"report\"\n          WHERE \"id\" = NEW.\"reportId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_tmp_pictures_reportId_into_oplog\n  AFTER UPDATE ON \"public\".\"tmp_pictures\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_tmp_pictures_reportId_into_oplog_function();"
    ],
    "version": "908"
  }
]