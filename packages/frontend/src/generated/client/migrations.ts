export default [
  {
    "statements": [
      "CREATE TABLE \"report\" (\n  \"id\" TEXT NOT NULL,\n  \"title\" TEXT NOT NULL,\n  \"redactedby\" TEXT NOT NULL,\n  \"ownedby\" TEXT NOT NULL,\n  \"createdbyid\" TEXT NOT NULL,\n  \"meetdate\" TEXT NOT NULL,\n  \"meetlink\" TEXT NOT NULL,\n  \"applicantname\" TEXT NOT NULL,\n  \"applicanttype\" TEXT NOT NULL,\n  \"projectstatus\" TEXT NOT NULL,\n  \"projectcadastralref\" TEXT NOT NULL,\n  \"projectlandcontact\" TEXT NOT NULL,\n  \"projectspacetype\" TEXT NOT NULL,\n  \"projectnature\" TEXT NOT NULL,\n  \"projectdescription\" TEXT NOT NULL,\n  \"decision\" TEXT NOT NULL,\n  \"decisioncomment\" TEXT NOT NULL,\n  \"contacts\" TEXT NOT NULL,\n  \"createdat\" TEXT NOT NULL,\n  \"updatedat\" TEXT NOT NULL,\n  CONSTRAINT \"report_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"report_to_clause\" (\n  \"id\" TEXT NOT NULL,\n  \"reportid\" TEXT NOT NULL,\n  \"clauseid\" TEXT NOT NULL,\n  CONSTRAINT \"report_to_clause_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"clause\" (\n  \"id\" TEXT NOT NULL,\n  \"label\" TEXT NOT NULL,\n  \"value\" TEXT NOT NULL,\n  CONSTRAINT \"clause_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.report', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_report_primarykey;",
      "CREATE TRIGGER update_ensure_main_report_primarykey\n  BEFORE UPDATE ON \"main\".\"report\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_report_into_oplog;",
      "CREATE TRIGGER insert_main_report_into_oplog\n   AFTER INSERT ON \"main\".\"report\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'INSERT', json_object('id', new.\"id\"), json_object('applicantname', new.\"applicantname\", 'applicanttype', new.\"applicanttype\", 'contacts', new.\"contacts\", 'createdat', new.\"createdat\", 'createdbyid', new.\"createdbyid\", 'decision', new.\"decision\", 'decisioncomment', new.\"decisioncomment\", 'id', new.\"id\", 'meetdate', new.\"meetdate\", 'meetlink', new.\"meetlink\", 'ownedby', new.\"ownedby\", 'projectcadastralref', new.\"projectcadastralref\", 'projectdescription', new.\"projectdescription\", 'projectlandcontact', new.\"projectlandcontact\", 'projectnature', new.\"projectnature\", 'projectspacetype', new.\"projectspacetype\", 'projectstatus', new.\"projectstatus\", 'redactedby', new.\"redactedby\", 'title', new.\"title\", 'updatedat', new.\"updatedat\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_report_into_oplog;",
      "CREATE TRIGGER update_main_report_into_oplog\n   AFTER UPDATE ON \"main\".\"report\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'UPDATE', json_object('id', new.\"id\"), json_object('applicantname', new.\"applicantname\", 'applicanttype', new.\"applicanttype\", 'contacts', new.\"contacts\", 'createdat', new.\"createdat\", 'createdbyid', new.\"createdbyid\", 'decision', new.\"decision\", 'decisioncomment', new.\"decisioncomment\", 'id', new.\"id\", 'meetdate', new.\"meetdate\", 'meetlink', new.\"meetlink\", 'ownedby', new.\"ownedby\", 'projectcadastralref', new.\"projectcadastralref\", 'projectdescription', new.\"projectdescription\", 'projectlandcontact', new.\"projectlandcontact\", 'projectnature', new.\"projectnature\", 'projectspacetype', new.\"projectspacetype\", 'projectstatus', new.\"projectstatus\", 'redactedby', new.\"redactedby\", 'title', new.\"title\", 'updatedat', new.\"updatedat\"), json_object('applicantname', old.\"applicantname\", 'applicanttype', old.\"applicanttype\", 'contacts', old.\"contacts\", 'createdat', old.\"createdat\", 'createdbyid', old.\"createdbyid\", 'decision', old.\"decision\", 'decisioncomment', old.\"decisioncomment\", 'id', old.\"id\", 'meetdate', old.\"meetdate\", 'meetlink', old.\"meetlink\", 'ownedby', old.\"ownedby\", 'projectcadastralref', old.\"projectcadastralref\", 'projectdescription', old.\"projectdescription\", 'projectlandcontact', old.\"projectlandcontact\", 'projectnature', old.\"projectnature\", 'projectspacetype', old.\"projectspacetype\", 'projectstatus', old.\"projectstatus\", 'redactedby', old.\"redactedby\", 'title', old.\"title\", 'updatedat', old.\"updatedat\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_report_into_oplog;",
      "CREATE TRIGGER delete_main_report_into_oplog\n   AFTER DELETE ON \"main\".\"report\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('applicantname', old.\"applicantname\", 'applicanttype', old.\"applicanttype\", 'contacts', old.\"contacts\", 'createdat', old.\"createdat\", 'createdbyid', old.\"createdbyid\", 'decision', old.\"decision\", 'decisioncomment', old.\"decisioncomment\", 'id', old.\"id\", 'meetdate', old.\"meetdate\", 'meetlink', old.\"meetlink\", 'ownedby', old.\"ownedby\", 'projectcadastralref', old.\"projectcadastralref\", 'projectdescription', old.\"projectdescription\", 'projectlandcontact', old.\"projectlandcontact\", 'projectnature', old.\"projectnature\", 'projectspacetype', old.\"projectspacetype\", 'projectstatus', old.\"projectstatus\", 'redactedby', old.\"redactedby\", 'title', old.\"title\", 'updatedat', old.\"updatedat\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.report_to_clause', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_report_to_clause_primarykey;",
      "CREATE TRIGGER update_ensure_main_report_to_clause_primarykey\n  BEFORE UPDATE ON \"main\".\"report_to_clause\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_report_to_clause_into_oplog;",
      "CREATE TRIGGER insert_main_report_to_clause_into_oplog\n   AFTER INSERT ON \"main\".\"report_to_clause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.report_to_clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report_to_clause', 'INSERT', json_object('id', new.\"id\"), json_object('clauseid', new.\"clauseid\", 'id', new.\"id\", 'reportid', new.\"reportid\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_report_to_clause_into_oplog;",
      "CREATE TRIGGER update_main_report_to_clause_into_oplog\n   AFTER UPDATE ON \"main\".\"report_to_clause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.report_to_clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report_to_clause', 'UPDATE', json_object('id', new.\"id\"), json_object('clauseid', new.\"clauseid\", 'id', new.\"id\", 'reportid', new.\"reportid\"), json_object('clauseid', old.\"clauseid\", 'id', old.\"id\", 'reportid', old.\"reportid\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_report_to_clause_into_oplog;",
      "CREATE TRIGGER delete_main_report_to_clause_into_oplog\n   AFTER DELETE ON \"main\".\"report_to_clause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.report_to_clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'report_to_clause', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('clauseid', old.\"clauseid\", 'id', old.\"id\", 'reportid', old.\"reportid\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.clause', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_clause_primarykey;",
      "CREATE TRIGGER update_ensure_main_clause_primarykey\n  BEFORE UPDATE ON \"main\".\"clause\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_clause_into_oplog;",
      "CREATE TRIGGER insert_main_clause_into_oplog\n   AFTER INSERT ON \"main\".\"clause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'clause', 'INSERT', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'label', new.\"label\", 'value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_clause_into_oplog;",
      "CREATE TRIGGER update_main_clause_into_oplog\n   AFTER UPDATE ON \"main\".\"clause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'clause', 'UPDATE', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'label', new.\"label\", 'value', new.\"value\"), json_object('id', old.\"id\", 'label', old.\"label\", 'value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_clause_into_oplog;",
      "CREATE TRIGGER delete_main_clause_into_oplog\n   AFTER DELETE ON \"main\".\"clause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'clause', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('id', old.\"id\", 'label', old.\"label\", 'value', old.\"value\"), NULL);\nEND;"
    ],
    "version": "1"
  }
]