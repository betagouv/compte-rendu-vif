export default [
  {
    "statements": [
      "CREATE TABLE \"User\" (\n  \"id\" TEXT NOT NULL,\n  \"email\" TEXT NOT NULL,\n  \"name\" TEXT,\n  \"password\" TEXT NOT NULL,\n  \"createdAt\" TEXT(3) NOT NULL,\n  \"updatedAt\" TEXT(3) NOT NULL,\n  CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE UNIQUE INDEX \"User_email_key\" ON \"User\" (\"email\" ASC);\n",
      "CREATE TABLE \"Report\" (\n  \"id\" TEXT NOT NULL,\n  \"title\" TEXT NOT NULL,\n  \"authorId\" TEXT NOT NULL,\n  \"meetDate\" TEXT(3) NOT NULL,\n  \"meetLink\" TEXT NOT NULL,\n  \"applicantName\" TEXT NOT NULL,\n  \"applicantType\" TEXT NOT NULL,\n  \"projectStatus\" TEXT NOT NULL,\n  \"projectCadastralRef\" TEXT NOT NULL,\n  \"projectLandContact\" TEXT NOT NULL,\n  \"projectSpaceType\" TEXT NOT NULL,\n  \"projectNature\" TEXT NOT NULL,\n  \"projectDescription\" TEXT NOT NULL,\n  \"decision\" TEXT NOT NULL,\n  \"decisionComment\" TEXT NOT NULL,\n  \"contacts\" TEXT NOT NULL,\n  \"createdAt\" TEXT(3) NOT NULL,\n  \"updatedAt\" TEXT(3) NOT NULL,\n  CONSTRAINT \"Report_authorId_fkey\" FOREIGN KEY (\"authorId\") REFERENCES \"User\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"Report_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"ReportToClause\" (\n  \"reportId\" TEXT NOT NULL,\n  \"clauseId\" TEXT NOT NULL,\n  CONSTRAINT \"ReportToClause_clauseId_fkey\" FOREIGN KEY (\"clauseId\") REFERENCES \"Clause\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"ReportToClause_reportId_fkey\" FOREIGN KEY (\"reportId\") REFERENCES \"Report\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT \"ReportToClause_pkey\" PRIMARY KEY (\"reportId\", \"clauseId\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"Clause\" (\n  \"id\" TEXT NOT NULL,\n  \"label\" TEXT NOT NULL,\n  \"value\" TEXT NOT NULL,\n  CONSTRAINT \"Clause_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.User', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_User_primarykey;",
      "CREATE TRIGGER update_ensure_main_User_primarykey\n  BEFORE UPDATE ON \"main\".\"User\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_User_into_oplog;",
      "CREATE TRIGGER insert_main_User_into_oplog\n   AFTER INSERT ON \"main\".\"User\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'User', 'INSERT', json_object('id', new.\"id\"), json_object('createdAt', new.\"createdAt\", 'email', new.\"email\", 'id', new.\"id\", 'name', new.\"name\", 'password', new.\"password\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_User_into_oplog;",
      "CREATE TRIGGER update_main_User_into_oplog\n   AFTER UPDATE ON \"main\".\"User\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'User', 'UPDATE', json_object('id', new.\"id\"), json_object('createdAt', new.\"createdAt\", 'email', new.\"email\", 'id', new.\"id\", 'name', new.\"name\", 'password', new.\"password\", 'updatedAt', new.\"updatedAt\"), json_object('createdAt', old.\"createdAt\", 'email', old.\"email\", 'id', old.\"id\", 'name', old.\"name\", 'password', old.\"password\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_User_into_oplog;",
      "CREATE TRIGGER delete_main_User_into_oplog\n   AFTER DELETE ON \"main\".\"User\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'User', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('createdAt', old.\"createdAt\", 'email', old.\"email\", 'id', old.\"id\", 'name', old.\"name\", 'password', old.\"password\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.Report', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_Report_primarykey;",
      "CREATE TRIGGER update_ensure_main_Report_primarykey\n  BEFORE UPDATE ON \"main\".\"Report\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_Report_into_oplog;",
      "CREATE TRIGGER insert_main_Report_into_oplog\n   AFTER INSERT ON \"main\".\"Report\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Report', 'INSERT', json_object('id', new.\"id\"), json_object('applicantName', new.\"applicantName\", 'applicantType', new.\"applicantType\", 'authorId', new.\"authorId\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'decision', new.\"decision\", 'decisionComment', new.\"decisionComment\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'meetLink', new.\"meetLink\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectLandContact', new.\"projectLandContact\", 'projectNature', new.\"projectNature\", 'projectSpaceType', new.\"projectSpaceType\", 'projectStatus', new.\"projectStatus\", 'title', new.\"title\", 'updatedAt', new.\"updatedAt\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_Report_into_oplog;",
      "CREATE TRIGGER update_main_Report_into_oplog\n   AFTER UPDATE ON \"main\".\"Report\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Report', 'UPDATE', json_object('id', new.\"id\"), json_object('applicantName', new.\"applicantName\", 'applicantType', new.\"applicantType\", 'authorId', new.\"authorId\", 'contacts', new.\"contacts\", 'createdAt', new.\"createdAt\", 'decision', new.\"decision\", 'decisionComment', new.\"decisionComment\", 'id', new.\"id\", 'meetDate', new.\"meetDate\", 'meetLink', new.\"meetLink\", 'projectCadastralRef', new.\"projectCadastralRef\", 'projectDescription', new.\"projectDescription\", 'projectLandContact', new.\"projectLandContact\", 'projectNature', new.\"projectNature\", 'projectSpaceType', new.\"projectSpaceType\", 'projectStatus', new.\"projectStatus\", 'title', new.\"title\", 'updatedAt', new.\"updatedAt\"), json_object('applicantName', old.\"applicantName\", 'applicantType', old.\"applicantType\", 'authorId', old.\"authorId\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'decision', old.\"decision\", 'decisionComment', old.\"decisionComment\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'meetLink', old.\"meetLink\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectLandContact', old.\"projectLandContact\", 'projectNature', old.\"projectNature\", 'projectSpaceType', old.\"projectSpaceType\", 'projectStatus', old.\"projectStatus\", 'title', old.\"title\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_Report_into_oplog;",
      "CREATE TRIGGER delete_main_Report_into_oplog\n   AFTER DELETE ON \"main\".\"Report\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Report')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Report', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('applicantName', old.\"applicantName\", 'applicantType', old.\"applicantType\", 'authorId', old.\"authorId\", 'contacts', old.\"contacts\", 'createdAt', old.\"createdAt\", 'decision', old.\"decision\", 'decisionComment', old.\"decisionComment\", 'id', old.\"id\", 'meetDate', old.\"meetDate\", 'meetLink', old.\"meetLink\", 'projectCadastralRef', old.\"projectCadastralRef\", 'projectDescription', old.\"projectDescription\", 'projectLandContact', old.\"projectLandContact\", 'projectNature', old.\"projectNature\", 'projectSpaceType', old.\"projectSpaceType\", 'projectStatus', old.\"projectStatus\", 'title', old.\"title\", 'updatedAt', old.\"updatedAt\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_Report_authorId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_Report_authorId_into_oplog\n  AFTER INSERT ON \"main\".\"Report\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"authorId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_Report_authorId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_Report_authorId_into_oplog\n   AFTER UPDATE ON \"main\".\"Report\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.User') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'User', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"User\" WHERE \"id\" = new.\"authorId\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.ReportToClause', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_ReportToClause_primarykey;",
      "CREATE TRIGGER update_ensure_main_ReportToClause_primarykey\n  BEFORE UPDATE ON \"main\".\"ReportToClause\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"clauseId\" != new.\"clauseId\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column clauseId as it belongs to the primary key')\n      WHEN old.\"reportId\" != new.\"reportId\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column reportId as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_ReportToClause_into_oplog;",
      "CREATE TRIGGER insert_main_ReportToClause_into_oplog\n   AFTER INSERT ON \"main\".\"ReportToClause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ReportToClause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ReportToClause', 'INSERT', json_object('clauseId', new.\"clauseId\", 'reportId', new.\"reportId\"), json_object('clauseId', new.\"clauseId\", 'reportId', new.\"reportId\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_ReportToClause_into_oplog;",
      "CREATE TRIGGER update_main_ReportToClause_into_oplog\n   AFTER UPDATE ON \"main\".\"ReportToClause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ReportToClause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ReportToClause', 'UPDATE', json_object('clauseId', new.\"clauseId\", 'reportId', new.\"reportId\"), json_object('clauseId', new.\"clauseId\", 'reportId', new.\"reportId\"), json_object('clauseId', old.\"clauseId\", 'reportId', old.\"reportId\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_ReportToClause_into_oplog;",
      "CREATE TRIGGER delete_main_ReportToClause_into_oplog\n   AFTER DELETE ON \"main\".\"ReportToClause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ReportToClause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ReportToClause', 'DELETE', json_object('clauseId', old.\"clauseId\", 'reportId', old.\"reportId\"), NULL, json_object('clauseId', old.\"clauseId\", 'reportId', old.\"reportId\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_ReportToClause_clauseId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_ReportToClause_clauseId_into_oplog\n  AFTER INSERT ON \"main\".\"ReportToClause\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Clause') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Clause', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Clause\" WHERE \"id\" = new.\"clauseId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_ReportToClause_clauseId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_ReportToClause_clauseId_into_oplog\n   AFTER UPDATE ON \"main\".\"ReportToClause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Clause') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Clause', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Clause\" WHERE \"id\" = new.\"clauseId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_ReportToClause_reportId_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_ReportToClause_reportId_into_oplog\n  AFTER INSERT ON \"main\".\"ReportToClause\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Report') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Report', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Report\" WHERE \"id\" = new.\"reportId\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_ReportToClause_reportId_into_oplog;",
      "CREATE TRIGGER compensation_update_main_ReportToClause_reportId_into_oplog\n   AFTER UPDATE ON \"main\".\"ReportToClause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Report') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'Report', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"Report\" WHERE \"id\" = new.\"reportId\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.Clause', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_Clause_primarykey;",
      "CREATE TRIGGER update_ensure_main_Clause_primarykey\n  BEFORE UPDATE ON \"main\".\"Clause\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_Clause_into_oplog;",
      "CREATE TRIGGER insert_main_Clause_into_oplog\n   AFTER INSERT ON \"main\".\"Clause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Clause', 'INSERT', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'label', new.\"label\", 'value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_Clause_into_oplog;",
      "CREATE TRIGGER update_main_Clause_into_oplog\n   AFTER UPDATE ON \"main\".\"Clause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Clause', 'UPDATE', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'label', new.\"label\", 'value', new.\"value\"), json_object('id', old.\"id\", 'label', old.\"label\", 'value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_Clause_into_oplog;",
      "CREATE TRIGGER delete_main_Clause_into_oplog\n   AFTER DELETE ON \"main\".\"Clause\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.Clause')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'Clause', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('id', old.\"id\", 'label', old.\"label\", 'value', old.\"value\"), NULL);\nEND;"
    ],
    "version": "1"
  }
]